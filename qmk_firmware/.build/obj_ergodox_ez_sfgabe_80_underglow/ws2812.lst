   1               		.file	"ws2812.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.ws2812_setleds,"ax",@progbits
  11               	.global	ws2812_setleds
  13               	ws2812_setleds:
  14               	.LVL0:
  15               	.LFB6:
  16               		.file 1 "drivers/avr/ws2812.c"
   1:drivers/avr/ws2812.c **** /*
   2:drivers/avr/ws2812.c ****  * light weight WS2812 lib V2.0b
   3:drivers/avr/ws2812.c ****  *
   4:drivers/avr/ws2812.c ****  * Controls WS2811/WS2812/WS2812B RGB-LEDs
   5:drivers/avr/ws2812.c ****  * Author: Tim (cpldcpu@gmail.com)
   6:drivers/avr/ws2812.c ****  *
   7:drivers/avr/ws2812.c ****  * Jan 18th, 2014  v2.0b Initial Version
   8:drivers/avr/ws2812.c ****  * Nov 29th, 2015  v2.3  Added SK6812RGBW support
   9:drivers/avr/ws2812.c ****  *
  10:drivers/avr/ws2812.c ****  * This program is free software: you can redistribute it and/or modify
  11:drivers/avr/ws2812.c ****  * it under the terms of the GNU General Public License as published by
  12:drivers/avr/ws2812.c ****  * the Free Software Foundation, either version 2 of the License, or
  13:drivers/avr/ws2812.c ****  * (at your option) any later version.
  14:drivers/avr/ws2812.c ****  *
  15:drivers/avr/ws2812.c ****  * This program is distributed in the hope that it will be useful,
  16:drivers/avr/ws2812.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  17:drivers/avr/ws2812.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  18:drivers/avr/ws2812.c ****  * GNU General Public License for more details.
  19:drivers/avr/ws2812.c ****  *
  20:drivers/avr/ws2812.c ****  * You should have received a copy of the GNU General Public License
  21:drivers/avr/ws2812.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  22:drivers/avr/ws2812.c ****  */
  23:drivers/avr/ws2812.c **** #include "ws2812.h"
  24:drivers/avr/ws2812.c **** #include <avr/interrupt.h>
  25:drivers/avr/ws2812.c **** #include <avr/io.h>
  26:drivers/avr/ws2812.c **** #include <util/delay.h>
  27:drivers/avr/ws2812.c **** 
  28:drivers/avr/ws2812.c **** #define pinmask(pin) (_BV((pin)&0xF))
  29:drivers/avr/ws2812.c **** 
  30:drivers/avr/ws2812.c **** /*
  31:drivers/avr/ws2812.c ****  * Forward declare internal functions
  32:drivers/avr/ws2812.c ****  *
  33:drivers/avr/ws2812.c ****  * The functions take a byte-array and send to the data output as WS2812 bitstream.
  34:drivers/avr/ws2812.c ****  * The length is the number of bytes to send - three per LED.
  35:drivers/avr/ws2812.c ****  */
  36:drivers/avr/ws2812.c **** 
  37:drivers/avr/ws2812.c **** static inline void ws2812_sendarray_mask(uint8_t *data, uint16_t datlen, uint8_t masklo, uint8_t ma
  38:drivers/avr/ws2812.c **** 
  39:drivers/avr/ws2812.c **** void ws2812_setleds(LED_TYPE *ledarray, uint16_t number_of_leds) {
  17               		.loc 1 39 66 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  40:drivers/avr/ws2812.c ****     DDRx_ADDRESS(RGB_DI_PIN) |= pinmask(RGB_DI_PIN);
  23               		.loc 1 40 5 view .LVU1
  24               		.loc 1 40 30 is_stmt 0 view .LVU2
  25 0000 579A      		sbi 0xa,7
  41:drivers/avr/ws2812.c **** 
  42:drivers/avr/ws2812.c ****     uint8_t masklo = ~(pinmask(RGB_DI_PIN)) & PORTx_ADDRESS(RGB_DI_PIN);
  26               		.loc 1 42 5 is_stmt 1 view .LVU3
  27               		.loc 1 42 45 is_stmt 0 view .LVU4
  28 0002 4BB1      		in r20,0xb
  29               		.loc 1 42 13 view .LVU5
  30 0004 4F77      		andi r20,lo8(127)
  31               	.LVL1:
  43:drivers/avr/ws2812.c ****     uint8_t maskhi = pinmask(RGB_DI_PIN) | PORTx_ADDRESS(RGB_DI_PIN);
  32               		.loc 1 43 5 is_stmt 1 view .LVU6
  33               		.loc 1 43 44 is_stmt 0 view .LVU7
  34 0006 5BB1      		in r21,0xb
  35               		.loc 1 43 13 view .LVU8
  36 0008 5068      		ori r21,lo8(-128)
  37               	.LVL2:
  44:drivers/avr/ws2812.c **** 
  45:drivers/avr/ws2812.c ****     ws2812_sendarray_mask((uint8_t *)ledarray, number_of_leds * sizeof(LED_TYPE), masklo, maskhi);
  38               		.loc 1 45 5 is_stmt 1 view .LVU9
  39               	.LBB8:
  40               	.LBI8:
  46:drivers/avr/ws2812.c **** 
  47:drivers/avr/ws2812.c ****     _delay_us(WS2812_TRST_US);
  48:drivers/avr/ws2812.c **** }
  49:drivers/avr/ws2812.c **** 
  50:drivers/avr/ws2812.c **** /*
  51:drivers/avr/ws2812.c ****   This routine writes an array of bytes with RGB values to the Dataout pin
  52:drivers/avr/ws2812.c ****   using the fast 800kHz clockless WS2811/2812 protocol.
  53:drivers/avr/ws2812.c **** */
  54:drivers/avr/ws2812.c **** 
  55:drivers/avr/ws2812.c **** // Timing in ns
  56:drivers/avr/ws2812.c **** #define w_zeropulse 350
  57:drivers/avr/ws2812.c **** #define w_onepulse 900
  58:drivers/avr/ws2812.c **** #define w_totalperiod 1250
  59:drivers/avr/ws2812.c **** 
  60:drivers/avr/ws2812.c **** // Fixed cycles used by the inner loop
  61:drivers/avr/ws2812.c **** #define w_fixedlow 2
  62:drivers/avr/ws2812.c **** #define w_fixedhigh 4
  63:drivers/avr/ws2812.c **** #define w_fixedtotal 8
  64:drivers/avr/ws2812.c **** 
  65:drivers/avr/ws2812.c **** // Insert NOPs to match the timing, if possible
  66:drivers/avr/ws2812.c **** #define w_zerocycles (((F_CPU / 1000) * w_zeropulse) / 1000000)
  67:drivers/avr/ws2812.c **** #define w_onecycles (((F_CPU / 1000) * w_onepulse + 500000) / 1000000)
  68:drivers/avr/ws2812.c **** #define w_totalcycles (((F_CPU / 1000) * w_totalperiod + 500000) / 1000000)
  69:drivers/avr/ws2812.c **** 
  70:drivers/avr/ws2812.c **** // w1 - nops between rising edge and falling edge - low
  71:drivers/avr/ws2812.c **** #define w1 (w_zerocycles - w_fixedlow)
  72:drivers/avr/ws2812.c **** // w2   nops between fe low and fe high
  73:drivers/avr/ws2812.c **** #define w2 (w_onecycles - w_fixedhigh - w1)
  74:drivers/avr/ws2812.c **** // w3   nops to complete loop
  75:drivers/avr/ws2812.c **** #define w3 (w_totalcycles - w_fixedtotal - w1 - w2)
  76:drivers/avr/ws2812.c **** 
  77:drivers/avr/ws2812.c **** #if w1 > 0
  78:drivers/avr/ws2812.c **** #    define w1_nops w1
  79:drivers/avr/ws2812.c **** #else
  80:drivers/avr/ws2812.c **** #    define w1_nops 0
  81:drivers/avr/ws2812.c **** #endif
  82:drivers/avr/ws2812.c **** 
  83:drivers/avr/ws2812.c **** // The only critical timing parameter is the minimum pulse length of the "0"
  84:drivers/avr/ws2812.c **** // Warn or throw error if this timing can not be met with current F_CPU settings.
  85:drivers/avr/ws2812.c **** #define w_lowtime ((w1_nops + w_fixedlow) * 1000000) / (F_CPU / 1000)
  86:drivers/avr/ws2812.c **** #if w_lowtime > 550
  87:drivers/avr/ws2812.c **** #    error "Light_ws2812: Sorry, the clock speed is too low. Did you set F_CPU correctly?"
  88:drivers/avr/ws2812.c **** #elif w_lowtime > 450
  89:drivers/avr/ws2812.c **** #    warning "Light_ws2812: The timing is critical and may only work on WS2812B, not on WS2812(S)."
  90:drivers/avr/ws2812.c **** #    warning "Please consider a higher clockspeed, if possible"
  91:drivers/avr/ws2812.c **** #endif
  92:drivers/avr/ws2812.c **** 
  93:drivers/avr/ws2812.c **** #if w2 > 0
  94:drivers/avr/ws2812.c **** #    define w2_nops w2
  95:drivers/avr/ws2812.c **** #else
  96:drivers/avr/ws2812.c **** #    define w2_nops 0
  97:drivers/avr/ws2812.c **** #endif
  98:drivers/avr/ws2812.c **** 
  99:drivers/avr/ws2812.c **** #if w3 > 0
 100:drivers/avr/ws2812.c **** #    define w3_nops w3
 101:drivers/avr/ws2812.c **** #else
 102:drivers/avr/ws2812.c **** #    define w3_nops 0
 103:drivers/avr/ws2812.c **** #endif
 104:drivers/avr/ws2812.c **** 
 105:drivers/avr/ws2812.c **** #define w_nop1 "nop      \n\t"
 106:drivers/avr/ws2812.c **** #define w_nop2 "rjmp .+0 \n\t"
 107:drivers/avr/ws2812.c **** #define w_nop4 w_nop2 w_nop2
 108:drivers/avr/ws2812.c **** #define w_nop8 w_nop4 w_nop4
 109:drivers/avr/ws2812.c **** #define w_nop16 w_nop8 w_nop8
 110:drivers/avr/ws2812.c **** 
 111:drivers/avr/ws2812.c **** static inline void ws2812_sendarray_mask(uint8_t *data, uint16_t datlen, uint8_t masklo, uint8_t ma
  41               		.loc 1 111 20 view .LVU10
  42               	.LBB9:
 112:drivers/avr/ws2812.c ****     uint8_t curbyte, ctr, sreg_prev;
  43               		.loc 1 112 5 view .LVU11
 113:drivers/avr/ws2812.c **** 
 114:drivers/avr/ws2812.c ****     sreg_prev = SREG;
  44               		.loc 1 114 5 view .LVU12
  45               		.loc 1 114 15 is_stmt 0 view .LVU13
  46 000a EFB7      		in r30,__SREG__
  47               	.LVL3:
 115:drivers/avr/ws2812.c ****     cli();
  48               		.loc 1 115 5 is_stmt 1 view .LVU14
  49               	/* #APP */
  50               	 ;  115 "drivers/avr/ws2812.c" 1
  51 000c F894      		cli
  52               	 ;  0 "" 2
 116:drivers/avr/ws2812.c **** 
 117:drivers/avr/ws2812.c ****     while (datlen--) {
  53               		.loc 1 117 5 view .LVU15
  54               	/* #NOAPP */
  55               	.LBE9:
  56               	.LBE8:
  45:drivers/avr/ws2812.c **** 
  57               		.loc 1 45 5 is_stmt 0 view .LVU16
  58 000e 9B01      		movw r18,r22
  59 0010 220F      		lsl r18
  60 0012 331F      		rol r19
  61 0014 260F      		add r18,r22
  62 0016 371F      		adc r19,r23
  63 0018 280F      		add r18,r24
  64 001a 391F      		adc r19,r25
  65               	.LVL4:
  66               	.L2:
  67               	.LBB12:
  68               	.LBB10:
  69               		.loc 1 117 11 is_stmt 1 view .LVU17
  70               		.loc 1 117 11 is_stmt 0 view .LVU18
  71 001c 2817      		cp r18,r24
  72 001e 3907      		cpc r19,r25
  73 0020 01F4      		brne .L3
 118:drivers/avr/ws2812.c ****         curbyte = (*data++);
 119:drivers/avr/ws2812.c **** 
 120:drivers/avr/ws2812.c ****         asm volatile("       ldi   %0,8  \n\t"
 121:drivers/avr/ws2812.c ****                      "loop%=:            \n\t"
 122:drivers/avr/ws2812.c ****                      "       out   %2,%3 \n\t"  //  '1' [01] '0' [01] - re
 123:drivers/avr/ws2812.c **** #if (w1_nops & 1)
 124:drivers/avr/ws2812.c ****                      w_nop1
 125:drivers/avr/ws2812.c **** #endif
 126:drivers/avr/ws2812.c **** #if (w1_nops & 2)
 127:drivers/avr/ws2812.c ****                          w_nop2
 128:drivers/avr/ws2812.c **** #endif
 129:drivers/avr/ws2812.c **** #if (w1_nops & 4)
 130:drivers/avr/ws2812.c ****                              w_nop4
 131:drivers/avr/ws2812.c **** #endif
 132:drivers/avr/ws2812.c **** #if (w1_nops & 8)
 133:drivers/avr/ws2812.c ****                                  w_nop8
 134:drivers/avr/ws2812.c **** #endif
 135:drivers/avr/ws2812.c **** #if (w1_nops & 16)
 136:drivers/avr/ws2812.c ****                                      w_nop16
 137:drivers/avr/ws2812.c **** #endif
 138:drivers/avr/ws2812.c ****                      "       sbrs  %1,7  \n\t"  //  '1' [03] '0' [02]
 139:drivers/avr/ws2812.c ****                      "       out   %2,%4 \n\t"  //  '1' [--] '0' [03] - fe-low
 140:drivers/avr/ws2812.c ****                      "       lsl   %1    \n\t"  //  '1' [04] '0' [04]
 141:drivers/avr/ws2812.c **** #if (w2_nops & 1)
 142:drivers/avr/ws2812.c ****                      w_nop1
 143:drivers/avr/ws2812.c **** #endif
 144:drivers/avr/ws2812.c **** #if (w2_nops & 2)
 145:drivers/avr/ws2812.c ****                          w_nop2
 146:drivers/avr/ws2812.c **** #endif
 147:drivers/avr/ws2812.c **** #if (w2_nops & 4)
 148:drivers/avr/ws2812.c ****                              w_nop4
 149:drivers/avr/ws2812.c **** #endif
 150:drivers/avr/ws2812.c **** #if (w2_nops & 8)
 151:drivers/avr/ws2812.c ****                                  w_nop8
 152:drivers/avr/ws2812.c **** #endif
 153:drivers/avr/ws2812.c **** #if (w2_nops & 16)
 154:drivers/avr/ws2812.c ****                                      w_nop16
 155:drivers/avr/ws2812.c **** #endif
 156:drivers/avr/ws2812.c ****                      "       out   %2,%4 \n\t"  //  '1' [+1] '0' [+1] - fe-high
 157:drivers/avr/ws2812.c **** #if (w3_nops & 1)
 158:drivers/avr/ws2812.c ****                      w_nop1
 159:drivers/avr/ws2812.c **** #endif
 160:drivers/avr/ws2812.c **** #if (w3_nops & 2)
 161:drivers/avr/ws2812.c ****                          w_nop2
 162:drivers/avr/ws2812.c **** #endif
 163:drivers/avr/ws2812.c **** #if (w3_nops & 4)
 164:drivers/avr/ws2812.c ****                              w_nop4
 165:drivers/avr/ws2812.c **** #endif
 166:drivers/avr/ws2812.c **** #if (w3_nops & 8)
 167:drivers/avr/ws2812.c ****                                  w_nop8
 168:drivers/avr/ws2812.c **** #endif
 169:drivers/avr/ws2812.c **** #if (w3_nops & 16)
 170:drivers/avr/ws2812.c ****                                      w_nop16
 171:drivers/avr/ws2812.c **** #endif
 172:drivers/avr/ws2812.c **** 
 173:drivers/avr/ws2812.c ****                      "       dec   %0    \n\t"  //  '1' [+2] '0' [+2]
 174:drivers/avr/ws2812.c ****                      "       brne  loop%=\n\t"  //  '1' [+3] '0' [+4]
 175:drivers/avr/ws2812.c ****                      : "=&d"(ctr)
 176:drivers/avr/ws2812.c ****                      : "r"(curbyte), "I"(_SFR_IO_ADDR(PORTx_ADDRESS(RGB_DI_PIN))), "r"(maskhi), "r"
 177:drivers/avr/ws2812.c ****     }
 178:drivers/avr/ws2812.c **** 
 179:drivers/avr/ws2812.c ****     SREG = sreg_prev;
  74               		.loc 1 179 5 is_stmt 1 view .LVU19
  75               		.loc 1 179 10 is_stmt 0 view .LVU20
  76 0022 EFBF      		out __SREG__,r30
  77               	.LVL5:
  78               		.loc 1 179 10 view .LVU21
  79               	.LBE10:
  80               	.LBE12:
  47:drivers/avr/ws2812.c **** }
  81               		.loc 1 47 5 is_stmt 1 view .LVU22
  82               	.LBB13:
  83               	.LBI13:
  84               		.file 2 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		}
 204:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		return;
 205:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	}
 206:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	else
 207:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 210:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** }
 211:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 212:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /**
 213:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 215:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 217:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 220:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 222:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 226:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 231:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 236:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    respectively.
 240:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 241:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \note
 242:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 243:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 253:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****  */
 254:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** void
 255:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** _delay_us(double __us)
  85               		.loc 2 255 1 view .LVU23
  86               	.LBB14:
 256:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** {
 257:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	double __tmp ;
  87               		.loc 2 257 2 view .LVU24
 258:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
  88               		.loc 2 261 2 view .LVU25
 262:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
  89               		.loc 2 262 2 view .LVU26
 263:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
  90               		.loc 2 263 2 view .LVU27
 264:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 265:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 268:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 271:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#else
 272:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		//round up by default
 273:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
  91               		.loc 2 273 3 view .LVU28
 274:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#endif
 275:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 276:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  92               		.loc 2 276 2 view .LVU29
  93 0024 8FE5      		ldi r24,lo8(1119)
  94 0026 94E0      		ldi r25,hi8(1119)
  95 0028 0197      	1:	sbiw r24,1
  96 002a 01F4      		brne 1b
  97 002c 00C0      		rjmp .
  98 002e 0000      		nop
  99               	.LVL6:
 100               	/* epilogue start */
 101               		.loc 2 276 2 is_stmt 0 view .LVU30
 102               	.LBE14:
 103               	.LBE13:
  48:drivers/avr/ws2812.c **** 
 104               		.loc 1 48 1 view .LVU31
 105 0030 0895      		ret
 106               	.LVL7:
 107               	.L3:
 108               	.LBB15:
 109               	.LBB11:
 118:drivers/avr/ws2812.c **** 
 110               		.loc 1 118 9 is_stmt 1 view .LVU32
 120:drivers/avr/ws2812.c ****                      "loop%=:            \n\t"
 111               		.loc 1 120 9 view .LVU33
 112 0032 DC01      		movw r26,r24
 113 0034 6D91      		ld r22,X+
 114 0036 CD01      		movw r24,r26
 115               	.LVL8:
 120:drivers/avr/ws2812.c ****                      "loop%=:            \n\t"
 116               		.loc 1 120 9 is_stmt 0 view .LVU34
 117               	/* #APP */
 118               	 ;  120 "drivers/avr/ws2812.c" 1
 119 0038 78E0      		       ldi   r23,8  
 120               		loop106:            
 121 003a 5BB9      		       out   11,r21 
 122 003c 0000      		nop      
 123 003e 00C0      		rjmp .+0 
 124 0040 67FF      		       sbrs  r22,7  
 125 0042 4BB9      		       out   11,r20 
 126 0044 660F      		       lsl   r22    
 127 0046 0000      		nop      
 128 0048 00C0      		rjmp .+0 
 129 004a 00C0      		rjmp .+0 
 130 004c 00C0      		rjmp .+0 
 131 004e 4BB9      		       out   11,r20 
 132 0050 00C0      		rjmp .+0 
 133 0052 7A95      		       dec   r23    
 134 0054 01F4      		       brne  loop106
 135               		
 136               	 ;  0 "" 2
 137               	.LVL9:
 120:drivers/avr/ws2812.c ****                      "loop%=:            \n\t"
 138               		.loc 1 120 9 view .LVU35
 139               	/* #NOAPP */
 140 0056 00C0      		rjmp .L2
 141               	.LBE11:
 142               	.LBE15:
 143               		.cfi_endproc
 144               	.LFE6:
 146               		.text
 147               	.Letext0:
 148               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/stdint.h"
 149               		.file 4 "./quantum/color.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ws2812.c
/var/folders/_9/m54r6fns3hz487qfhcdsxzvr0000gn/T//ccScWjwT.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_9/m54r6fns3hz487qfhcdsxzvr0000gn/T//ccScWjwT.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_9/m54r6fns3hz487qfhcdsxzvr0000gn/T//ccScWjwT.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_9/m54r6fns3hz487qfhcdsxzvr0000gn/T//ccScWjwT.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_9/m54r6fns3hz487qfhcdsxzvr0000gn/T//ccScWjwT.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_9/m54r6fns3hz487qfhcdsxzvr0000gn/T//ccScWjwT.s:13     .text.ws2812_setleds:0000000000000000 ws2812_setleds
/var/folders/_9/m54r6fns3hz487qfhcdsxzvr0000gn/T//ccScWjwT.s:120    .text.ws2812_setleds:000000000000003a loop106

NO UNDEFINED SYMBOLS
