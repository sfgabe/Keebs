   1               		.file	"bootloader.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.bootloader_jump,"ax",@progbits
  11               	.global	bootloader_jump
  13               	bootloader_jump:
  14               	.LFB102:
  15               		.file 1 "tmk_core/common/avr/bootloader.c"
   1:tmk_core/common/avr/bootloader.c **** #include <stdint.h>
   2:tmk_core/common/avr/bootloader.c **** #include <stdbool.h>
   3:tmk_core/common/avr/bootloader.c **** #include <avr/io.h>
   4:tmk_core/common/avr/bootloader.c **** #include <avr/eeprom.h>
   5:tmk_core/common/avr/bootloader.c **** #include <avr/interrupt.h>
   6:tmk_core/common/avr/bootloader.c **** #include <avr/wdt.h>
   7:tmk_core/common/avr/bootloader.c **** #include <util/delay.h>
   8:tmk_core/common/avr/bootloader.c **** #include "bootloader.h"
   9:tmk_core/common/avr/bootloader.c **** #include <avr/boot.h>
  10:tmk_core/common/avr/bootloader.c **** 
  11:tmk_core/common/avr/bootloader.c **** #ifdef PROTOCOL_LUFA
  12:tmk_core/common/avr/bootloader.c **** #    include <LUFA/Drivers/USB/USB.h>
  13:tmk_core/common/avr/bootloader.c **** #endif
  14:tmk_core/common/avr/bootloader.c **** 
  15:tmk_core/common/avr/bootloader.c **** /** \brief Bootloader Size in *bytes*
  16:tmk_core/common/avr/bootloader.c ****  *
  17:tmk_core/common/avr/bootloader.c ****  * AVR Boot section size are defined by setting BOOTSZ fuse in fact. Consult with your MCU datashee
  18:tmk_core/common/avr/bootloader.c ****  * Note that 'Word'(2 bytes) size and address are used in datasheet while TMK uses 'Byte'.
  19:tmk_core/common/avr/bootloader.c ****  *
  20:tmk_core/common/avr/bootloader.c ****  * Size of Bootloaders in bytes:
  21:tmk_core/common/avr/bootloader.c ****  *   Atmel DFU loader(ATmega32U4)   4096
  22:tmk_core/common/avr/bootloader.c ****  *   Atmel DFU loader(AT90USB128)   8192
  23:tmk_core/common/avr/bootloader.c ****  *   LUFA bootloader(ATmega32U4)    4096
  24:tmk_core/common/avr/bootloader.c ****  *   Arduino Caterina(ATmega32U4)   4096
  25:tmk_core/common/avr/bootloader.c ****  *   USBaspLoader(ATmega***)        2048
  26:tmk_core/common/avr/bootloader.c ****  *   Teensy   halfKay(ATmega32U4)   512
  27:tmk_core/common/avr/bootloader.c ****  *   Teensy++ halfKay(AT90USB128)   1024
  28:tmk_core/common/avr/bootloader.c ****  *
  29:tmk_core/common/avr/bootloader.c ****  * AVR Boot section is located at the end of Flash memory like the followings.
  30:tmk_core/common/avr/bootloader.c ****  *
  31:tmk_core/common/avr/bootloader.c ****  * byte     Atmel/LUFA(ATMega32u4)          byte     Atmel(AT90SUB128)
  32:tmk_core/common/avr/bootloader.c ****  * 0x0000   +---------------+               0x00000  +---------------+
  33:tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  34:tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  35:tmk_core/common/avr/bootloader.c ****  *          |  Application  |                        |  Application  |
  36:tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  37:tmk_core/common/avr/bootloader.c ****  *          =               =                        =               =
  38:tmk_core/common/avr/bootloader.c ****  *          |               | 32KB-4KB               |               | 128KB-8KB
  39:tmk_core/common/avr/bootloader.c ****  * 0x7000   +---------------+               0x1E000  +---------------+
  40:tmk_core/common/avr/bootloader.c ****  *          |  Bootloader   | 4KB                    |  Bootloader   | 8KB
  41:tmk_core/common/avr/bootloader.c ****  * 0x7FFF   +---------------+               0x1FFFF  +---------------+
  42:tmk_core/common/avr/bootloader.c ****  *
  43:tmk_core/common/avr/bootloader.c ****  *
  44:tmk_core/common/avr/bootloader.c ****  * byte     Teensy(ATMega32u4)              byte     Teensy++(AT90SUB128)
  45:tmk_core/common/avr/bootloader.c ****  * 0x0000   +---------------+               0x00000  +---------------+
  46:tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  47:tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  48:tmk_core/common/avr/bootloader.c ****  *          |  Application  |                        |  Application  |
  49:tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  50:tmk_core/common/avr/bootloader.c ****  *          =               =                        =               =
  51:tmk_core/common/avr/bootloader.c ****  *          |               | 32KB-512B              |               | 128KB-1KB
  52:tmk_core/common/avr/bootloader.c ****  * 0x7E00   +---------------+               0x1FC00  +---------------+
  53:tmk_core/common/avr/bootloader.c ****  *          |  Bootloader   | 512B                   |  Bootloader   | 1KB
  54:tmk_core/common/avr/bootloader.c ****  * 0x7FFF   +---------------+               0x1FFFF  +---------------+
  55:tmk_core/common/avr/bootloader.c ****  */
  56:tmk_core/common/avr/bootloader.c **** #define FLASH_SIZE (FLASHEND + 1L)
  57:tmk_core/common/avr/bootloader.c **** 
  58:tmk_core/common/avr/bootloader.c **** #if !defined(BOOTLOADER_SIZE)
  59:tmk_core/common/avr/bootloader.c **** uint16_t bootloader_start;
  60:tmk_core/common/avr/bootloader.c **** #endif
  61:tmk_core/common/avr/bootloader.c **** 
  62:tmk_core/common/avr/bootloader.c **** // compatibility between ATMega8 and ATMega88
  63:tmk_core/common/avr/bootloader.c **** #if !defined(MCUCSR)
  64:tmk_core/common/avr/bootloader.c **** #    if defined(MCUSR)
  65:tmk_core/common/avr/bootloader.c **** #        define MCUCSR MCUSR
  66:tmk_core/common/avr/bootloader.c **** #    endif
  67:tmk_core/common/avr/bootloader.c **** #endif
  68:tmk_core/common/avr/bootloader.c **** 
  69:tmk_core/common/avr/bootloader.c **** /** \brief Entering the Bootloader via Software
  70:tmk_core/common/avr/bootloader.c ****  *
  71:tmk_core/common/avr/bootloader.c ****  * http://www.fourwalledcubicle.com/files/LUFA/Doc/120730/html/_page__software_bootloader_start.htm
  72:tmk_core/common/avr/bootloader.c ****  */
  73:tmk_core/common/avr/bootloader.c **** #define BOOTLOADER_RESET_KEY 0xB007B007
  74:tmk_core/common/avr/bootloader.c **** uint32_t reset_key __attribute__((section(".noinit,\"aw\",@nobits;")));
  75:tmk_core/common/avr/bootloader.c **** 
  76:tmk_core/common/avr/bootloader.c **** /** \brief initialize MCU status by watchdog reset
  77:tmk_core/common/avr/bootloader.c ****  *
  78:tmk_core/common/avr/bootloader.c ****  * FIXME: needs doc
  79:tmk_core/common/avr/bootloader.c ****  */
  80:tmk_core/common/avr/bootloader.c **** void bootloader_jump(void) {
  16               		.loc 1 80 28 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  81:tmk_core/common/avr/bootloader.c **** #if !defined(BOOTLOADER_SIZE)
  82:tmk_core/common/avr/bootloader.c ****     uint8_t high_fuse = boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
  83:tmk_core/common/avr/bootloader.c **** 
  84:tmk_core/common/avr/bootloader.c ****     if (high_fuse & ~(FUSE_BOOTSZ0 & FUSE_BOOTSZ1)) {
  85:tmk_core/common/avr/bootloader.c ****         bootloader_start = (FLASH_SIZE - 512) >> 1;
  86:tmk_core/common/avr/bootloader.c ****     } else if (high_fuse & ~(FUSE_BOOTSZ1)) {
  87:tmk_core/common/avr/bootloader.c ****         bootloader_start = (FLASH_SIZE - 1024) >> 1;
  88:tmk_core/common/avr/bootloader.c ****     } else if (high_fuse & ~(FUSE_BOOTSZ0)) {
  89:tmk_core/common/avr/bootloader.c ****         bootloader_start = (FLASH_SIZE - 2048) >> 1;
  90:tmk_core/common/avr/bootloader.c ****     } else {
  91:tmk_core/common/avr/bootloader.c ****         bootloader_start = (FLASH_SIZE - 4096) >> 1;
  92:tmk_core/common/avr/bootloader.c ****     }
  93:tmk_core/common/avr/bootloader.c **** #endif
  94:tmk_core/common/avr/bootloader.c **** 
  95:tmk_core/common/avr/bootloader.c ****     // Something like this might work, but it compiled larger than the block above
  96:tmk_core/common/avr/bootloader.c ****     // bootloader_start = FLASH_SIZE - (256 << (~high_fuse & 0b110 >> 1));
  97:tmk_core/common/avr/bootloader.c **** 
  98:tmk_core/common/avr/bootloader.c **** #if defined(BOOTLOADER_HALFKAY)
  99:tmk_core/common/avr/bootloader.c ****     //  http://www.pjrc.com/teensy/jump_to_bootloader.html
 100:tmk_core/common/avr/bootloader.c ****     cli();
  22               		.loc 1 100 5 view .LVU1
  23               	/* #APP */
  24               	 ;  100 "tmk_core/common/avr/bootloader.c" 1
  25 0000 F894      		cli
  26               	 ;  0 "" 2
 101:tmk_core/common/avr/bootloader.c ****     // disable watchdog, if enabled (it's not)
 102:tmk_core/common/avr/bootloader.c ****     // disable all peripherals
 103:tmk_core/common/avr/bootloader.c ****     // a shutdown call might make sense here
 104:tmk_core/common/avr/bootloader.c ****     UDCON  = 1;
  27               		.loc 1 104 5 view .LVU2
  28               		.loc 1 104 12 is_stmt 0 view .LVU3
  29               	/* #NOAPP */
  30 0002 81E0      		ldi r24,lo8(1)
  31 0004 8093 E000 		sts 224,r24
 105:tmk_core/common/avr/bootloader.c ****     USBCON = (1 << FRZCLK);  // disable USB
  32               		.loc 1 105 5 is_stmt 1 view .LVU4
  33               		.loc 1 105 12 is_stmt 0 view .LVU5
  34 0008 80E2      		ldi r24,lo8(32)
  35 000a 8093 D800 		sts 216,r24
 106:tmk_core/common/avr/bootloader.c ****     UCSR1B = 0;
  36               		.loc 1 106 5 is_stmt 1 view .LVU6
  37               		.loc 1 106 12 is_stmt 0 view .LVU7
  38 000e E9EC      		ldi r30,lo8(-55)
  39 0010 F0E0      		ldi r31,0
  40 0012 1082      		st Z,__zero_reg__
 107:tmk_core/common/avr/bootloader.c ****     _delay_ms(5);
  41               		.loc 1 107 5 is_stmt 1 view .LVU8
  42               	.LVL0:
  43               	.LBB4:
  44               	.LBI4:
  45               		.file 2 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** _delay_ms(double __ms)
  46               		.loc 2 166 1 view .LVU9
  47               	.LBB5:
 167:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	double __tmp ;
  48               		.loc 2 168 2 view .LVU10
 169:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
  49               		.loc 2 172 2 view .LVU11
 173:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
  50               		.loc 2 173 2 view .LVU12
 174:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
  51               		.loc 2 174 2 view .LVU13
 175:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
  52               		.loc 2 184 3 view .LVU14
 185:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  53               		.loc 2 187 2 view .LVU15
  54 0014 8FE1      		ldi r24,lo8(19999)
  55 0016 9EE4      		ldi r25,hi8(19999)
  56 0018 0197      	1:	sbiw r24,1
  57 001a 01F4      		brne 1b
  58 001c 00C0      		rjmp .
  59 001e 0000      		nop
  60               	.LVL1:
  61               		.loc 2 187 2 is_stmt 0 view .LVU16
  62               	.LBE5:
  63               	.LBE4:
 108:tmk_core/common/avr/bootloader.c **** #    if defined(__AVR_AT90USB162__)  // Teensy 1.0
 109:tmk_core/common/avr/bootloader.c ****     EIMSK  = 0;
 110:tmk_core/common/avr/bootloader.c ****     PCICR  = 0;
 111:tmk_core/common/avr/bootloader.c ****     SPCR   = 0;
 112:tmk_core/common/avr/bootloader.c ****     ACSR   = 0;
 113:tmk_core/common/avr/bootloader.c ****     EECR   = 0;
 114:tmk_core/common/avr/bootloader.c ****     TIMSK0 = 0;
 115:tmk_core/common/avr/bootloader.c ****     TIMSK1 = 0;
 116:tmk_core/common/avr/bootloader.c ****     UCSR1B = 0;
 117:tmk_core/common/avr/bootloader.c ****     DDRB   = 0;
 118:tmk_core/common/avr/bootloader.c ****     DDRC   = 0;
 119:tmk_core/common/avr/bootloader.c ****     DDRD   = 0;
 120:tmk_core/common/avr/bootloader.c ****     PORTB  = 0;
 121:tmk_core/common/avr/bootloader.c ****     PORTC  = 0;
 122:tmk_core/common/avr/bootloader.c ****     PORTD  = 0;
 123:tmk_core/common/avr/bootloader.c ****     asm volatile("jmp 0x3E00");
 124:tmk_core/common/avr/bootloader.c **** #    elif defined(__AVR_ATmega32U4__)   // Teensy 2.0
 125:tmk_core/common/avr/bootloader.c ****     EIMSK  = 0;
  64               		.loc 1 125 5 is_stmt 1 view .LVU17
  65               		.loc 1 125 12 is_stmt 0 view .LVU18
  66 0020 1DBA      		out 0x1d,__zero_reg__
 126:tmk_core/common/avr/bootloader.c ****     PCICR  = 0;
  67               		.loc 1 126 5 is_stmt 1 view .LVU19
  68               		.loc 1 126 12 is_stmt 0 view .LVU20
  69 0022 1092 6800 		sts 104,__zero_reg__
 127:tmk_core/common/avr/bootloader.c ****     SPCR   = 0;
  70               		.loc 1 127 5 is_stmt 1 view .LVU21
  71               		.loc 1 127 12 is_stmt 0 view .LVU22
  72 0026 1CBC      		out 0x2c,__zero_reg__
 128:tmk_core/common/avr/bootloader.c ****     ACSR   = 0;
  73               		.loc 1 128 5 is_stmt 1 view .LVU23
  74               		.loc 1 128 12 is_stmt 0 view .LVU24
  75 0028 10BE      		out 0x30,__zero_reg__
 129:tmk_core/common/avr/bootloader.c ****     EECR   = 0;
  76               		.loc 1 129 5 is_stmt 1 view .LVU25
  77               		.loc 1 129 12 is_stmt 0 view .LVU26
  78 002a 1FBA      		out 0x1f,__zero_reg__
 130:tmk_core/common/avr/bootloader.c ****     ADCSRA = 0;
  79               		.loc 1 130 5 is_stmt 1 view .LVU27
  80               		.loc 1 130 12 is_stmt 0 view .LVU28
  81 002c 1092 7A00 		sts 122,__zero_reg__
 131:tmk_core/common/avr/bootloader.c ****     TIMSK0 = 0;
  82               		.loc 1 131 5 is_stmt 1 view .LVU29
  83               		.loc 1 131 12 is_stmt 0 view .LVU30
  84 0030 1092 6E00 		sts 110,__zero_reg__
 132:tmk_core/common/avr/bootloader.c ****     TIMSK1 = 0;
  85               		.loc 1 132 5 is_stmt 1 view .LVU31
  86               		.loc 1 132 12 is_stmt 0 view .LVU32
  87 0034 1092 6F00 		sts 111,__zero_reg__
 133:tmk_core/common/avr/bootloader.c ****     TIMSK3 = 0;
  88               		.loc 1 133 5 is_stmt 1 view .LVU33
  89               		.loc 1 133 12 is_stmt 0 view .LVU34
  90 0038 1092 7100 		sts 113,__zero_reg__
 134:tmk_core/common/avr/bootloader.c ****     TIMSK4 = 0;
  91               		.loc 1 134 5 is_stmt 1 view .LVU35
  92               		.loc 1 134 12 is_stmt 0 view .LVU36
  93 003c 1092 7200 		sts 114,__zero_reg__
 135:tmk_core/common/avr/bootloader.c ****     UCSR1B = 0;
  94               		.loc 1 135 5 is_stmt 1 view .LVU37
  95               		.loc 1 135 12 is_stmt 0 view .LVU38
  96 0040 1082      		st Z,__zero_reg__
 136:tmk_core/common/avr/bootloader.c ****     TWCR   = 0;
  97               		.loc 1 136 5 is_stmt 1 view .LVU39
  98               		.loc 1 136 12 is_stmt 0 view .LVU40
  99 0042 ECEB      		ldi r30,lo8(-68)
 100 0044 F0E0      		ldi r31,0
 101 0046 1082      		st Z,__zero_reg__
 137:tmk_core/common/avr/bootloader.c ****     DDRB   = 0;
 102               		.loc 1 137 5 is_stmt 1 view .LVU41
 103               		.loc 1 137 12 is_stmt 0 view .LVU42
 104 0048 14B8      		out 0x4,__zero_reg__
 138:tmk_core/common/avr/bootloader.c ****     DDRC   = 0;
 105               		.loc 1 138 5 is_stmt 1 view .LVU43
 106               		.loc 1 138 12 is_stmt 0 view .LVU44
 107 004a 17B8      		out 0x7,__zero_reg__
 139:tmk_core/common/avr/bootloader.c ****     DDRD   = 0;
 108               		.loc 1 139 5 is_stmt 1 view .LVU45
 109               		.loc 1 139 12 is_stmt 0 view .LVU46
 110 004c 1AB8      		out 0xa,__zero_reg__
 140:tmk_core/common/avr/bootloader.c ****     DDRE   = 0;
 111               		.loc 1 140 5 is_stmt 1 view .LVU47
 112               		.loc 1 140 12 is_stmt 0 view .LVU48
 113 004e 1DB8      		out 0xd,__zero_reg__
 141:tmk_core/common/avr/bootloader.c ****     DDRF   = 0;
 114               		.loc 1 141 5 is_stmt 1 view .LVU49
 115               		.loc 1 141 12 is_stmt 0 view .LVU50
 116 0050 10BA      		out 0x10,__zero_reg__
 142:tmk_core/common/avr/bootloader.c ****     TWCR   = 0;
 117               		.loc 1 142 5 is_stmt 1 view .LVU51
 118               		.loc 1 142 12 is_stmt 0 view .LVU52
 119 0052 1082      		st Z,__zero_reg__
 143:tmk_core/common/avr/bootloader.c ****     PORTB  = 0;
 120               		.loc 1 143 5 is_stmt 1 view .LVU53
 121               		.loc 1 143 12 is_stmt 0 view .LVU54
 122 0054 15B8      		out 0x5,__zero_reg__
 144:tmk_core/common/avr/bootloader.c ****     PORTC  = 0;
 123               		.loc 1 144 5 is_stmt 1 view .LVU55
 124               		.loc 1 144 12 is_stmt 0 view .LVU56
 125 0056 18B8      		out 0x8,__zero_reg__
 145:tmk_core/common/avr/bootloader.c ****     PORTD  = 0;
 126               		.loc 1 145 5 is_stmt 1 view .LVU57
 127               		.loc 1 145 12 is_stmt 0 view .LVU58
 128 0058 1BB8      		out 0xb,__zero_reg__
 146:tmk_core/common/avr/bootloader.c ****     PORTE  = 0;
 129               		.loc 1 146 5 is_stmt 1 view .LVU59
 130               		.loc 1 146 12 is_stmt 0 view .LVU60
 131 005a 1EB8      		out 0xe,__zero_reg__
 147:tmk_core/common/avr/bootloader.c ****     PORTF  = 0;
 132               		.loc 1 147 5 is_stmt 1 view .LVU61
 133               		.loc 1 147 12 is_stmt 0 view .LVU62
 134 005c 11BA      		out 0x11,__zero_reg__
 148:tmk_core/common/avr/bootloader.c ****     asm volatile("jmp 0x7E00");
 135               		.loc 1 148 5 is_stmt 1 view .LVU63
 136               	/* #APP */
 137               	 ;  148 "tmk_core/common/avr/bootloader.c" 1
 138 005e 0C94 003F 		jmp 0x7E00
 139               	 ;  0 "" 2
 140               	/* #NOAPP */
 141               	/* epilogue start */
 149:tmk_core/common/avr/bootloader.c **** #    elif defined(__AVR_AT90USB646__)   // Teensy++ 1.0
 150:tmk_core/common/avr/bootloader.c ****     EIMSK  = 0;
 151:tmk_core/common/avr/bootloader.c ****     PCICR  = 0;
 152:tmk_core/common/avr/bootloader.c ****     SPCR   = 0;
 153:tmk_core/common/avr/bootloader.c ****     ACSR   = 0;
 154:tmk_core/common/avr/bootloader.c ****     EECR   = 0;
 155:tmk_core/common/avr/bootloader.c ****     ADCSRA = 0;
 156:tmk_core/common/avr/bootloader.c ****     TIMSK0 = 0;
 157:tmk_core/common/avr/bootloader.c ****     TIMSK1 = 0;
 158:tmk_core/common/avr/bootloader.c ****     TIMSK2 = 0;
 159:tmk_core/common/avr/bootloader.c ****     TIMSK3 = 0;
 160:tmk_core/common/avr/bootloader.c ****     UCSR1B = 0;
 161:tmk_core/common/avr/bootloader.c ****     TWCR   = 0;
 162:tmk_core/common/avr/bootloader.c ****     DDRA   = 0;
 163:tmk_core/common/avr/bootloader.c ****     DDRB   = 0;
 164:tmk_core/common/avr/bootloader.c ****     DDRC   = 0;
 165:tmk_core/common/avr/bootloader.c ****     DDRD   = 0;
 166:tmk_core/common/avr/bootloader.c ****     DDRE   = 0;
 167:tmk_core/common/avr/bootloader.c ****     DDRF   = 0;
 168:tmk_core/common/avr/bootloader.c ****     PORTA  = 0;
 169:tmk_core/common/avr/bootloader.c ****     PORTB  = 0;
 170:tmk_core/common/avr/bootloader.c ****     PORTC  = 0;
 171:tmk_core/common/avr/bootloader.c ****     PORTD  = 0;
 172:tmk_core/common/avr/bootloader.c ****     PORTE  = 0;
 173:tmk_core/common/avr/bootloader.c ****     PORTF  = 0;
 174:tmk_core/common/avr/bootloader.c ****     asm volatile("jmp 0xFC00");
 175:tmk_core/common/avr/bootloader.c **** #    elif defined(__AVR_AT90USB1286__)  // Teensy++ 2.0
 176:tmk_core/common/avr/bootloader.c ****     EIMSK  = 0;
 177:tmk_core/common/avr/bootloader.c ****     PCICR  = 0;
 178:tmk_core/common/avr/bootloader.c ****     SPCR   = 0;
 179:tmk_core/common/avr/bootloader.c ****     ACSR   = 0;
 180:tmk_core/common/avr/bootloader.c ****     EECR   = 0;
 181:tmk_core/common/avr/bootloader.c ****     ADCSRA = 0;
 182:tmk_core/common/avr/bootloader.c ****     TIMSK0 = 0;
 183:tmk_core/common/avr/bootloader.c ****     TIMSK1 = 0;
 184:tmk_core/common/avr/bootloader.c ****     TIMSK2 = 0;
 185:tmk_core/common/avr/bootloader.c ****     TIMSK3 = 0;
 186:tmk_core/common/avr/bootloader.c ****     UCSR1B = 0;
 187:tmk_core/common/avr/bootloader.c ****     TWCR   = 0;
 188:tmk_core/common/avr/bootloader.c ****     DDRA   = 0;
 189:tmk_core/common/avr/bootloader.c ****     DDRB   = 0;
 190:tmk_core/common/avr/bootloader.c ****     DDRC   = 0;
 191:tmk_core/common/avr/bootloader.c ****     DDRD   = 0;
 192:tmk_core/common/avr/bootloader.c ****     DDRE   = 0;
 193:tmk_core/common/avr/bootloader.c ****     DDRF   = 0;
 194:tmk_core/common/avr/bootloader.c ****     PORTA  = 0;
 195:tmk_core/common/avr/bootloader.c ****     PORTB  = 0;
 196:tmk_core/common/avr/bootloader.c ****     PORTC  = 0;
 197:tmk_core/common/avr/bootloader.c ****     PORTD  = 0;
 198:tmk_core/common/avr/bootloader.c ****     PORTE  = 0;
 199:tmk_core/common/avr/bootloader.c ****     PORTF  = 0;
 200:tmk_core/common/avr/bootloader.c ****     asm volatile("jmp 0x1FC00");
 201:tmk_core/common/avr/bootloader.c **** #    endif
 202:tmk_core/common/avr/bootloader.c **** 
 203:tmk_core/common/avr/bootloader.c **** #elif defined(BOOTLOADER_CATERINA)
 204:tmk_core/common/avr/bootloader.c ****     // this block may be optional
 205:tmk_core/common/avr/bootloader.c ****     // TODO: figure it out
 206:tmk_core/common/avr/bootloader.c **** 
 207:tmk_core/common/avr/bootloader.c ****     uint16_t *const bootKeyPtr = (uint16_t *)0x0800;
 208:tmk_core/common/avr/bootloader.c **** 
 209:tmk_core/common/avr/bootloader.c ****     // Value used by Caterina bootloader use to determine whether to run the
 210:tmk_core/common/avr/bootloader.c ****     // sketch or the bootloader programmer.
 211:tmk_core/common/avr/bootloader.c ****     uint16_t bootKey = 0x7777;
 212:tmk_core/common/avr/bootloader.c **** 
 213:tmk_core/common/avr/bootloader.c ****     *bootKeyPtr = bootKey;
 214:tmk_core/common/avr/bootloader.c **** 
 215:tmk_core/common/avr/bootloader.c ****     // setup watchdog timeout
 216:tmk_core/common/avr/bootloader.c ****     wdt_enable(WDTO_60MS);
 217:tmk_core/common/avr/bootloader.c **** 
 218:tmk_core/common/avr/bootloader.c ****     while (1) {
 219:tmk_core/common/avr/bootloader.c ****     }  // wait for watchdog timer to trigger
 220:tmk_core/common/avr/bootloader.c **** 
 221:tmk_core/common/avr/bootloader.c **** #elif defined(BOOTLOADER_USBASP)
 222:tmk_core/common/avr/bootloader.c ****     // Taken with permission of Stephan Baerwolf from https://github.com/tinyusbboard/API/blob/mast
 223:tmk_core/common/avr/bootloader.c ****     wdt_enable(WDTO_15MS);
 224:tmk_core/common/avr/bootloader.c ****     wdt_reset();
 225:tmk_core/common/avr/bootloader.c ****     asm volatile("cli                    \n\t"
 226:tmk_core/common/avr/bootloader.c ****                  "ldi    r29 ,       %[ramendhi] \n\t"
 227:tmk_core/common/avr/bootloader.c ****                  "ldi    r28 ,       %[ramendlo] \n\t"
 228:tmk_core/common/avr/bootloader.c **** #    if (FLASHEND > 131071)
 229:tmk_core/common/avr/bootloader.c ****                  "ldi    r18 ,       %[bootaddrhi]   \n\t"
 230:tmk_core/common/avr/bootloader.c ****                  "st     Y+,         r18     \n\t"
 231:tmk_core/common/avr/bootloader.c **** #    endif
 232:tmk_core/common/avr/bootloader.c ****                  "ldi    r18 ,       %[bootaddrme]   \n\t"
 233:tmk_core/common/avr/bootloader.c ****                  "st     Y+,     r18     \n\t"
 234:tmk_core/common/avr/bootloader.c ****                  "ldi    r18 ,       %[bootaddrlo]   \n\t"
 235:tmk_core/common/avr/bootloader.c ****                  "st     Y+,     r18     \n\t"
 236:tmk_core/common/avr/bootloader.c ****                  "out    %[mcucsrio],    __zero_reg__    \n\t"
 237:tmk_core/common/avr/bootloader.c ****                  "bootloader_startup_loop%=:         \n\t"
 238:tmk_core/common/avr/bootloader.c ****                  "rjmp bootloader_startup_loop%=     \n\t"
 239:tmk_core/common/avr/bootloader.c ****                  :
 240:tmk_core/common/avr/bootloader.c ****                  : [mcucsrio] "I"(_SFR_IO_ADDR(MCUCSR)),
 241:tmk_core/common/avr/bootloader.c **** #    if (FLASHEND > 131071)
 242:tmk_core/common/avr/bootloader.c ****                    [ramendhi] "M"(((RAMEND - 2) >> 8) & 0xff), [ramendlo] "M"(((RAMEND - 2) >> 0) &
 243:tmk_core/common/avr/bootloader.c **** #    else
 244:tmk_core/common/avr/bootloader.c ****                    [ramendhi] "M"(((RAMEND - 1) >> 8) & 0xff), [ramendlo] "M"(((RAMEND - 1) >> 0) &
 245:tmk_core/common/avr/bootloader.c **** #    endif
 246:tmk_core/common/avr/bootloader.c ****                    [bootaddrme] "M"((((FLASH_SIZE - BOOTLOADER_SIZE) >> 1) >> 8) & 0xff), [bootaddr
 247:tmk_core/common/avr/bootloader.c **** 
 248:tmk_core/common/avr/bootloader.c **** #else  // Assume remaining boards are DFU, even if the flag isn't set
 249:tmk_core/common/avr/bootloader.c **** 
 250:tmk_core/common/avr/bootloader.c **** #    if !(defined(__AVR_ATmega32A__) || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega328__) |
 251:tmk_core/common/avr/bootloader.c ****     UDCON  = 1;
 252:tmk_core/common/avr/bootloader.c ****     USBCON = (1 << FRZCLK);  // disable USB
 253:tmk_core/common/avr/bootloader.c ****     UCSR1B = 0;
 254:tmk_core/common/avr/bootloader.c ****     _delay_ms(5);  // 5 seems to work fine
 255:tmk_core/common/avr/bootloader.c **** #    endif
 256:tmk_core/common/avr/bootloader.c **** 
 257:tmk_core/common/avr/bootloader.c **** #    ifdef BOOTLOADER_BOOTLOADHID
 258:tmk_core/common/avr/bootloader.c ****     // force bootloadHID to stay in bootloader mode, so that it waits
 259:tmk_core/common/avr/bootloader.c ****     // for a new firmware to be flashed
 260:tmk_core/common/avr/bootloader.c ****     eeprom_write_byte((uint8_t *)1, 0x00);
 261:tmk_core/common/avr/bootloader.c **** #    endif
 262:tmk_core/common/avr/bootloader.c **** 
 263:tmk_core/common/avr/bootloader.c ****     // watchdog reset
 264:tmk_core/common/avr/bootloader.c ****     reset_key = BOOTLOADER_RESET_KEY;
 265:tmk_core/common/avr/bootloader.c ****     wdt_enable(WDTO_250MS);
 266:tmk_core/common/avr/bootloader.c ****     for (;;)
 267:tmk_core/common/avr/bootloader.c ****         ;
 268:tmk_core/common/avr/bootloader.c **** #endif
 269:tmk_core/common/avr/bootloader.c **** }
 142               		.loc 1 269 1 is_stmt 0 view .LVU64
 143 0062 0895      		ret
 144               		.cfi_endproc
 145               	.LFE102:
 147               		.section	.init3,"ax",@progbits
 148               	.global	bootloader_jump_after_watchdog_reset
 150               	bootloader_jump_after_watchdog_reset:
 151               	.LFB103:
 270:tmk_core/common/avr/bootloader.c **** 
 271:tmk_core/common/avr/bootloader.c **** /* this runs before main() */
 272:tmk_core/common/avr/bootloader.c **** void bootloader_jump_after_watchdog_reset(void) __attribute__((used, naked, section(".init3")));
 273:tmk_core/common/avr/bootloader.c **** void bootloader_jump_after_watchdog_reset(void) {
 152               		.loc 1 273 49 is_stmt 1 view -0
 153               		.cfi_startproc
 154               	/* prologue: naked */
 155               	/* frame size = 0 */
 156               	/* stack size = 0 */
 157               	.L__stack_usage = 0
 274:tmk_core/common/avr/bootloader.c **** #ifndef BOOTLOADER_HALFKAY
 275:tmk_core/common/avr/bootloader.c ****     if ((MCUCSR & (1 << WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
 276:tmk_core/common/avr/bootloader.c ****         reset_key = 0;
 277:tmk_core/common/avr/bootloader.c **** 
 278:tmk_core/common/avr/bootloader.c ****         // My custom USBasploader requires this to come up.
 279:tmk_core/common/avr/bootloader.c ****         MCUCSR = 0;
 280:tmk_core/common/avr/bootloader.c **** 
 281:tmk_core/common/avr/bootloader.c ****         // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
 282:tmk_core/common/avr/bootloader.c ****         MCUCSR &= ~(1 << WDRF);
 283:tmk_core/common/avr/bootloader.c ****         wdt_disable();
 284:tmk_core/common/avr/bootloader.c **** 
 285:tmk_core/common/avr/bootloader.c **** // This is compled into 'icall', address should be in word unit, not byte.
 286:tmk_core/common/avr/bootloader.c **** #    ifdef BOOTLOADER_SIZE
 287:tmk_core/common/avr/bootloader.c ****         ((void (*)(void))((FLASH_SIZE - BOOTLOADER_SIZE) >> 1))();
 288:tmk_core/common/avr/bootloader.c **** #    else
 289:tmk_core/common/avr/bootloader.c ****         asm("ijmp" ::"z"(bootloader_start));
 290:tmk_core/common/avr/bootloader.c **** #    endif
 291:tmk_core/common/avr/bootloader.c ****     }
 292:tmk_core/common/avr/bootloader.c **** #endif
 293:tmk_core/common/avr/bootloader.c **** }
 158               		.loc 1 293 1 view .LVU66
 159               	/* epilogue start */
 160               		.cfi_endproc
 161               	.LFE103:
 163               	.global	reset_key
 164               		.section	.noinit,"aw",@nobits;,"aw"
 167               	reset_key:
 168 0000 0000 0000 		.zero	4
 169               		.text
 170               	.Letext0:
 171               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/stdint.h"
 172               		.file 4 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 173               		.file 5 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 174               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 175               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 176               		.file 8 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootloader.c
/var/folders/_9/m54r6fns3hz487qfhcdsxzvr0000gn/T//ccDaXcRn.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_9/m54r6fns3hz487qfhcdsxzvr0000gn/T//ccDaXcRn.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_9/m54r6fns3hz487qfhcdsxzvr0000gn/T//ccDaXcRn.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_9/m54r6fns3hz487qfhcdsxzvr0000gn/T//ccDaXcRn.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_9/m54r6fns3hz487qfhcdsxzvr0000gn/T//ccDaXcRn.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_9/m54r6fns3hz487qfhcdsxzvr0000gn/T//ccDaXcRn.s:13     .text.bootloader_jump:0000000000000000 bootloader_jump
/var/folders/_9/m54r6fns3hz487qfhcdsxzvr0000gn/T//ccDaXcRn.s:150    .init3:0000000000000000 bootloader_jump_after_watchdog_reset
/var/folders/_9/m54r6fns3hz487qfhcdsxzvr0000gn/T//ccDaXcRn.s:167    .noinit:0000000000000000 reset_key

NO UNDEFINED SYMBOLS
